CopyLEFT (^^) Gwenaël Laurent
Made as an exercice for the lecture on Algorithmic geometry, given by
Julian Pfeifle at FME, UPC, Barcelona.

The folowing programs are free softwares; you can redistribute it and/or
modify it under the terms of the GNU General Public License
as published by the Free Software Foundation; either version 2
of the License, or (at your option) any later version.

This program is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
GNU General Public License for more details.

You should have received a copy of the GNU General Public License
along with this program; if not, write to the Free Software
Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.

ect, ect...

********************************************************************************
EASY TO HANDLE
Download the full folder in you depository and chose a suitable compilator for
Python.

	- The function orbit compute the number of reflective hyperplanes of a given
	  Coxeter group in dimension n and the cardinality of the orbit of a given point.
	  This point should be defined as an array of dimension n+1, which correspond to
	  this vector representation in the projective space.
	- The file generators.py contains some routines which automatically send a list of
	  suitable generators for some given Coxeters groups.

ADDITIONAL REMARKS
I have chosen Python for it flexibility. Considering that the routine has to compute 
all elements of Coxeter group from a given set of generators, we have to cope with 
the problem of iteratively multiplying all the elements of the group which are already 
know by all generators, adding the new elements obtained to the list of already knew 
elements and repeating the procedure until no more new element is obtained. For this 
purpose, it can be practical to iterate a list which is growing during the iteration, 
instead of defining several lists and operate on its. This facility is provide by supple 
Python's language. 

EFFICIENCY AND RESTRICTIONS
The program is runing in reasonable time whenever the dimension is relatively small. 
Nevertheless, time complexity is growing quite drastically with the dimension.

	- A2, A3, A4 are computed in a few seconds. A5 can be much more longer, depending
	  strongly of the vector v passed as argument (or randomly generated by the routine).
	- D2,D3, D4 are perfomed in a few seconds, but D5 can take typically one or two minutes
	  (depending of the vector v).
	- F4 works in about 25 seconds.
	- H and E are threat by incertainty, both about time complexity and convergence itself.
	  In the case of F, it is possibily related to estimate if two vector are equals when 
	  rounding errors occurs. It could be easily corrected. For E, it seem to be much more
	  harder...
	

	- The function orbit compute the number of reflections hyperplanes of a given
	  Coxeter group in dimension n and the cardinality of the orbit of a given vector.
	- The file generators contains the routines which automatically send a list of
	  suitable generators for some given Coxeters groups.